<!DOCTYPE html>
<html>
  <head>
    <script
      type="text/javascript"
      src="https://sandbox.web.squarecdn.com/v1/square.js"
    ></script>
      <link href="/app.css" rel="stylesheet" />
      <link href="/dark-mode.css" rel="stylesheet" />
  </head>
  <body class="dark-mode">
    <div>
        <%=alert%>
    </div>
    <%= form_with(id: "payment-form",url: payments_path, method: :post, local: true) do |f| %>
      <div class="mb-3">
        <label for="card" class="form-label">Credit Card</label>
        <div id="card-container"> </div>
        <%= f.hidden_field "card-nonce", name: "nonce" %>   
      </div>
      <%= f.submit "Pay" ,id: "card-button",class: "btn btn-primary"%>
    <% end %>
        <div id="payment-status-container"></div>
  </body>
  <script>
    const appId = "<%=ENV['appId']%>";
    const locationId = "<%=ENV['location_id']%>";
    async function initializeCard(payments) {
      const card = await payments.card({
          style: darkModeCardStyle,
        });
        await card.attach('#card-container');
      return card;
    }

    async function tokenize(paymentMethod)
      {
        //debugger;
        const tokenResult = await paymentMethod.tokenize();
        if (tokenResult.status === 'OK')
        {
          return tokenResult.token;
        }
        else
        {
          let errorMessage = `Tokenization failed with status: ${tokenResult.status}`;
          if (tokenResult.errors) {
            errorMessage += ` and errors: ${JSON.stringify(
              tokenResult.errors
            )}`;
          }
        return errorMessage
        }
      }

      document.addEventListener('DOMContentLoaded', async function () {
      const cardButton = document.getElementById('card-button');
      // debugger
      cardButton.addEventListener('click', async function (event)
        {
          await handlePaymentMethodSubmission(event, card);
          document.getElementById('payment-form').submit();
        }
        );

      if (!window.Square) {
        return;
      }

      let payments;
      try {
        payments = window.Square.payments(appId, locationId);
      } catch(e) {
        const statusContainer = document.getElementById(
          'payment-status-container'
        );
        statusContainer.className = 'missing-credentials';
        statusContainer.style.visibility = 'visible';
      	console.error(e);
        return;
      }

      let card;
      try {
        card = await initializeCard(payments);
      } catch (e) {
        console.error('Initializing Card failed', e);
        return;
      }

      cardButton.addEventListener('click', async function (event) {
        handlePaymentMethodSubmission(event, card);
      });

      async function handlePaymentMethodSubmission(event, paymentMethod) {
        event.preventDefault();
        try {
            cardButton.disabled = true;
            const token = await tokenize(paymentMethod);
            //debugger;
          	document.getElementById('card-nonce').value = token;
        } catch (e) {
    	  console.error(e.message);
          cardButton.disabled = false;
        }
      }
    });

    //code for card style
     const darkModeCardStyle = {
        '.input-container': {
          borderColor: '#2D2D2D',
          borderRadius: '6px',
        },
        '.input-container.is-focus': {
          borderColor: '#006AFF',
        },
        '.input-container.is-error': {
          borderColor: '#ff1600',
        },
        '.message-text': {
          color: '#999999',
        },
        '.message-icon': {
          color: '#999999',
        },
        '.message-text.is-error': {
          color: '#ff1600',
        },
        '.message-icon.is-error': {
          color: '#ff1600',
        },
        input: {
          backgroundColor: '#2D2D2D',
          color: '#FFFFFF',
          fontFamily: 'helvetica neue, sans-serif',
        },
        'input::placeholder': {
          color: '#999999',
        },
        'input.is-error': {
          color: '#ff1600',
        },
      };

  </script>
</html>

  <!DOCTYPE html>
<html>
  <head>
    <script
      type="text/javascript"
      src="https://sandbox.web.squarecdn.com/v1/square.js"
    ></script>
  </head>
  <body class="dark-mode">
    <div>
        <%=alert%>
    </div>
    <%= form_with(id: "payment-form",url: payments_path, method: :post, local: true) do |f| %>
      <div class="mb-3">
        <label for="card" class="form-label">Credit Card</label>
        <div id="card-container"> </div>
        <%= f.hidden_field "card-nonce", name: "nonce" %>   
        <%= f.hidden_field "card-token", name: "ver_token" %> 
      </div>
      <%= f.submit "Pay" ,id: "card-button",class: "btn btn-primary"%>
    <% end %>
        <div id="payment-status-container"></div>
  </body>
  <script>
    const appId = "<%=ENV['appId']%>";
    const locationId = "<%=ENV['location_id']%>";
    async function initializeCard(payments) {
      const card = await payments.card({
          style: darkModeCardStyle,
        });
        await card.attach('#card-container');
      return card;
    }

    async function tokenize(paymentMethod) 
    {
      const tokenResult = await paymentMethod.tokenize();   
      if (tokenResult.status === 'OK') 
      {
        return tokenResult.token;
      } 
      else 
      {
        let errorMessage = `Tokenization failed with status: ${tokenResult.status}`;
        if (tokenResult.errors) {
          errorMessage += ` and errors: ${JSON.stringify(
            tokenResult.errors
          )}`;
        }
      return errorMessage
      }
    }
    //for SCA

    async function verifyBuyer(payments, token) {
      const verificationDetails = {
        amount: '120',
        /* collected from the buyer */
        billingContact: {
          addressLines: ['123 Main Street', 'Apartment 1'],
          familyName: 'Doe',
          givenName: 'John',
          email: 'jondoe@gmail.com',
          country: 'GB',
          phone: '3214563987',
          region: 'LND',
          city: 'London',
        },
        currencyCode: 'USD',
        intent: 'CHARGE',
      };

      const verificationResults = await payments.verifyBuyer(
        token,
        verificationDetails
      );
      return verificationResults.token;
    }

    document.addEventListener('DOMContentLoaded', async function () {
      const cardButton = document.getElementById('card-button');
      cardButton.addEventListener('click', async function (event) 
        {
          await handlePaymentMethodSubmission(event, card, true);
          // debugger;
          document.getElementById('payment-form').submit();
        });

      if (!window.Square) {
        return;
      }

      let payments;
      try {
        payments = window.Square.payments(appId, locationId);
      } catch(e) {
        const statusContainer = document.getElementById(
          'payment-status-container'
        );
        statusContainer.className = 'missing-credentials';
        statusContainer.style.visibility = 'visible';
        console.error(e);	
        return;
      }

      let card;
      try {
        card = await initializeCard(payments);
      } catch (e) {
        console.error('Initializing Card failed', e);
        return;
      }

    async function handlePaymentMethodSubmission(event,paymentMethod,shouldVerify = false) {
      event.preventDefault();
      try {
        // disable the submit button as we await tokenization and make a payment
        // request.
        cardButton.disabled = true;
        const token = await tokenize(paymentMethod);
        let verificationToken;

        if (shouldVerify) {
          verificationToken = await verifyBuyer(
            payments,
            token
          );
        }

        console.debug('Verification Token:', verificationToken);
        document.getElementById('card-nonce').value = token;
        document.getElementById('card-token').value = verificationToken;
    
      } catch (e) {
        cardButton.disabled = false;
        console.log('FAILURE');
        console.error(e.message);
      }
    }
    });

    //createpayment
     // verificationToken can be undefined, as it does not apply to all payment
 // methods.
    async function createPayment(token, verificationToken) {
      const bodyParameters = {
          locationId,
          sourceId: token,
      };

      if (verificationToken !== undefined) {
        bodyParameters.verificationToken = verificationToken;
      }

      const body = JSON.stringify(bodyParameters);

        // Same as in the cards example.
      const paymentResponse = await fetch('/payments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body,
      });

      if (paymentResponse.ok) {
        return paymentResponse.json();
      }

      const errorBody = await paymentResponse.text();
      throw new Error(errorBody);
    }
    //code for card style
     const darkModeCardStyle = {
        '.input-container': {
          borderColor: '#2D2D2D',
          borderRadius: '6px',
        },
        '.input-container.is-focus': {
          borderColor: '#006AFF',
        },
        '.input-container.is-error': {
          borderColor: '#ff1600',
        },
        '.message-text': {
          color: '#999999',
        },
        '.message-icon': {
          color: '#999999',
        },
        '.message-text.is-error': {
          color: '#ff1600',
        },
        '.message-icon.is-error': {
          color: '#ff1600',
        },
        input: {
          backgroundColor: '#2D2D2D',
          color: '#FFFFFF',
          fontFamily: 'helvetica neue, sans-serif',
        },
        'input::placeholder': {
          color: '#999999',
        },
        'input.is-error': {
          color: '#ff1600',
        },
      };

  </script>
</html>
